{
  "info": {
    "name": "SaaS Boilerplate API",
    "description": "Complete API collection for the SaaS Boilerplate platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "targetTenantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "membershipId",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "currentSessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "roleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId1",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId2",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId3",
      "value": "",
      "type": "string"
    },
    {
      "key": "parentRoleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "onboardingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminUserId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('firstName');",
                  "    pm.expect(response.user).to.have.property('lastName');",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenant');",
                  "    pm.expect(response.tenant).to.have.property('id');",
                  "    pm.expect(response.tenant).to.have.property('name');",
                  "    pm.expect(response.tenant).to.have.property('domain');",
                  "});",
                  "",
                  "pm.test('User email matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.email).to.equal('test@example.com');",
                  "});",
                  "",
                  "pm.test('Tenant domain matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.tenant.domain).to.equal('testcompany.com');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('userId', response.user.id);",
                  "    pm.environment.set('tenantId', response.tenant.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"tenantName\": \"Test Company\",\n  \"domain\": \"testcompany.com\",\n  \"description\": \"Test tenant for development\",\n  \"contactEmail\": \"admin@testcompany.com\",\n  \"contactPhone\": \"+1234567890\",\n  \"address\": \"123 Test Street\",\n  \"city\": \"Test City\",\n  \"state\": \"Test State\",\n  \"postalCode\": \"12345\",\n  \"country\": \"US\",\n  \"timezone\": \"America/New_York\",\n  \"locale\": \"en-US\",\n  \"currency\": \"USD\",\n  \"marketingConsent\": true,\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.user.id);",
                  "    pm.environment.set('tenantId', response.user.tenantId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Email verified successfully');",
                  "});",
                  "",
                  "pm.test('Response indicates email verification', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('verified');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"email-verification-token-here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            }
          },
          "response": []
        },
        {
          "name": "Resend Email Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Verification email sent');",
                  "});",
                  "",
                  "pm.test('Response indicates email was sent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-verification"]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"password-reset-token-here\",\n  \"newPassword\": \"NewSecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Multi-Factor Authentication",
      "item": [
        {
          "name": "Setup MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/setup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "setup"]
            }
          },
          "response": []
        },
        {
          "name": "Enable MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/enable",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "enable"]
            }
          },
          "response": []
        },
        {
          "name": "Disable MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/disable",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "disable"]
            }
          },
          "response": []
        },
        {
          "name": "Verify MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Get MFA Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/status",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "status"]
            }
          },
          "response": []
        },
        {
          "name": "Regenerate Backup Codes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/backup-codes/regenerate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "backup-codes", "regenerate"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Account Recovery",
      "item": [
        {
          "name": "Initiate Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "initiate"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"recovery-token-here\",\n  \"backupCode\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Complete Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoverySessionToken\": \"recovery-session-token-here\",\n  \"newTotpSecret\": \"optional-new-totp-secret\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/complete",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "complete"]
            }
          },
          "response": []
        },
        {
          "name": "Get Recovery Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/status?recoverySessionToken=recovery-session-token-here",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "status"],
              "query": [
                {
                  "key": "recoverySessionToken",
                  "value": "recovery-session-token-here"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Attempt Backup Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"recovery-token-here\",\n  \"backupCode\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/attempt",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "attempt"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Session Management",
      "item": [
        {
          "name": "Get All Sessions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.sessions && response.sessions.length > 0) {",
                  "        pm.environment.set('sessionId', response.sessions[0].id);",
                  "        pm.environment.set('currentSessionId', response.sessions[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Get Active Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/active",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "active"]
            }
          },
          "response": []
        },
        {
          "name": "Get Session by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Session",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceName\": \"Updated Device Name\",\n  \"isTrusted\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Session",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Revoke All Sessions",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Logout all devices\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["sessions"]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Other Sessions",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-session-id",
                "value": "{{currentSessionId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/others",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "others"]
            }
          },
          "response": []
        },
        {
          "name": "Mark Device as Trusted",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/trust",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "trust"]
            }
          },
          "response": []
        },
        {
          "name": "Update Session Activity",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/activity",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "activity"]
            }
          },
          "response": []
        },
        {
          "name": "Extend Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"additionalMinutes\": 60\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/extend",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "extend"]
            }
          },
          "response": []
        },
        {
          "name": "Mark Session as Suspicious",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/suspicious",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "suspicious"]
            }
          },
          "response": []
        },
        {
          "name": "Get Session Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/stats/summary",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "stats", "summary"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role-Based Access Control (RBAC)",
      "item": [
        {
          "name": "Permissions",
          "item": [
            {
              "name": "Get All Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response).to.have.property('limit');",
                      "});",
                      "",
                      "pm.test('Permissions is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Pagination values are correct', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.page).to.equal(1);",
                      "    pm.expect(response.limit).to.equal(50);",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});",
                      "",
                      "pm.test('Permission objects have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        const permission = response.permissions[0];",
                      "        pm.expect(permission).to.have.property('id');",
                      "        pm.expect(permission).to.have.property('name');",
                      "        pm.expect(permission).to.have.property('resource');",
                      "        pm.expect(permission).to.have.property('action');",
                      "        pm.expect(permission).to.have.property('scope');",
                      "        pm.expect(permission).to.have.property('isSystem');",
                      "        pm.expect(permission).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions?page=1&limit=50",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "50"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Permission by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions", "{{permissionId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Create Permission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('resource');",
                      "    pm.expect(response).to.have.property('action');",
                      "    pm.expect(response).to.have.property('scope');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "});",
                      "",
                      "pm.test('Permission is not system permission', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isSystem).to.be.false;",
                      "});",
                      "",
                      "pm.test('Permission is active', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isActive).to.be.true;",
                      "});",
                      "",
                      "// Set permission ID for subsequent requests",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('permissionId', response.id);",
                      "    pm.collectionVariables.set('permissionId1', response.id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"files:manage\",\n  \"description\": \"File management permission\",\n  \"resource\": \"files\",\n  \"action\": \"manage\",\n  \"scope\": \"tenant\",\n  \"conditions\": {\n    \"requireApproval\": true\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions"]
                }
              },
              "response": []
            },
            {
              "name": "Update Permission",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"files:manage:enhanced\",\n  \"description\": \"Enhanced file management permission\",\n  \"scope\": \"team\",\n  \"conditions\": {\n    \"requireAudit\": true\n  },\n  \"isActive\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions", "{{permissionId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Delete Permission",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions", "{{permissionId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Get System Permissions",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/system",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions", "system"]
                }
              },
              "response": []
            },
            {
              "name": "Get Custom Permissions",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/custom",
                  "host": ["{{baseUrl}}"],
                  "path": ["permissions", "custom"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Roles",
          "item": [
            {
              "name": "Get All Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('roles');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response).to.have.property('limit');",
                      "});",
                      "",
                      "pm.test('Roles is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.roles).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Pagination values are correct', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.page).to.equal(1);",
                      "    pm.expect(response.limit).to.equal(50);",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});",
                      "",
                      "pm.test('Role objects have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.roles.length > 0) {",
                      "        const role = response.roles[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isSystem');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "        pm.expect(role).to.have.property('permissions');",
                      "        pm.expect(role).to.have.property('totalPermissions');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles?page=1&limit=50",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "50"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Role by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('type');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Role ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});",
                      "",
                      "pm.test('Permissions is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "{{roleId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Create Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('type');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Role is custom type', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.type).to.equal('custom');",
                      "});",
                      "",
                      "pm.test('Role is not system role', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isSystem).to.be.false;",
                      "});",
                      "",
                      "pm.test('Role is active', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isActive).to.be.true;",
                      "});",
                      "",
                      "pm.test('Role has permissions array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "// Set role ID for subsequent requests",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('roleId', response.id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Team Lead\",\n  \"description\": \"Team lead role with enhanced permissions\",\n  \"type\": \"custom\",\n  \"level\": 3,\n  \"parentRoleId\": \"{{parentRoleId}}\",\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true\n  },\n  \"permissionIds\": [\n    \"{{permissionId1}}\",\n    \"{{permissionId2}}\"\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles"]
                }
              },
              "response": []
            },
            {
              "name": "Update Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('description');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response.name).to.equal('Senior Team Lead');",
                      "    pm.expect(response.description).to.equal('Senior team lead with additional privileges');",
                      "    pm.expect(response.level).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Role ID remains unchanged', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});",
                      "",
                      "pm.test('Metadata is updated', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('metadata');",
                      "    pm.expect(response.metadata).to.have.property('canManageTeam');",
                      "    pm.expect(response.metadata).to.have.property('canViewReports');",
                      "    pm.expect(response.metadata).to.have.property('canManageBudget');",
                      "});",
                      "",
                      "pm.test('Updated timestamp is present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('updatedAt');",
                      "    pm.expect(response.updatedAt).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Senior Team Lead\",\n  \"description\": \"Senior team lead with additional privileges\",\n  \"level\": 2,\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true,\n    \"canManageBudget\": true\n  },\n  \"isActive\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "{{roleId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Delete Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "{{roleId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Get System Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('All roles are system roles', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        response.forEach(role => {",
                      "            pm.expect(role).to.have.property('isSystem');",
                      "            pm.expect(role.isSystem).to.be.true;",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test('System roles have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const role = response[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/system",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "system"]
                }
              },
              "response": []
            },
            {
              "name": "Get Custom Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('All roles are custom roles', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        response.forEach(role => {",
                      "            pm.expect(role).to.have.property('type');",
                      "            pm.expect(role.type).to.equal('custom');",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test('Custom roles have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const role = response[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/custom",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "custom"]
                }
              },
              "response": []
            },
            {
              "name": "Create Default Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Default roles created successfully');",
                      "});",
                      "",
                      "pm.test('Response indicates default roles were created', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('default');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/default",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "default"]
                }
              },
              "response": []
            },
            {
              "name": "Update Super Admin Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Super Admin permissions updated successfully');",
                      "});",
                      "",
                      "pm.test('Response has permissions count', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissionsCount');",
                      "    pm.expect(response.permissionsCount).to.be.a('number');",
                      "    pm.expect(response.permissionsCount).to.be.greaterThan(0);",
                      "});",
                      "",
                      "pm.test('Super Admin has comprehensive permissions', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissionsCount).to.be.greaterThan(100);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/super-admin/update-permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "super-admin", "update-permissions"]
                }
              },
              "response": []
            },
            {
              "name": "Get Super Admin Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Super Admin has extensive permissions', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.length).to.be.greaterThan(100);",
                      "});",
                      "",
                      "pm.test('Permissions have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const permission = response[0];",
                      "        pm.expect(permission).to.have.property('id');",
                      "        pm.expect(permission).to.have.property('name');",
                      "        pm.expect(permission).to.have.property('resource');",
                      "        pm.expect(permission).to.have.property('action');",
                      "        pm.expect(permission).to.have.property('scope');",
                      "    }",
                      "});",
                      "",
                      "pm.test('Super Admin has all resource types', function () {",
                      "    const response = pm.response.json();",
                      "    const resources = [...new Set(response.map(p => p.resource))];",
                      "    pm.expect(resources.length).to.be.greaterThan(10);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/super-admin/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "super-admin", "permissions"]
                }
              },
              "response": []
            },
            {
              "name": "Assign Permissions to Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated role data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Permissions array is updated', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "    pm.expect(response.totalPermissions).to.be.a('number');",
                      "    pm.expect(response.totalPermissions).to.be.greaterThan(0);",
                      "});",
                      "",
                      "pm.test('Role ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"permissionIds\": [\n    \"{{permissionId1}}\",\n    \"{{permissionId2}}\",\n    \"{{permissionId3}}\"\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "{{roleId}}", "permissions"]
                }
              },
              "response": []
            },
            {
              "name": "Remove Permissions from Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  \"{{permissionId1}}\",\n  \"{{permissionId2}}\"\n]"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "{{roleId}}", "permissions"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "User Role Management",
          "item": [
            {
              "name": "Assign Role to User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Role assigned successfully');",
                      "});",
                      "",
                      "pm.test('Response has user and role information', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response).to.have.property('roleId');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "    pm.expect(response.roleId).to.equal(pm.collectionVariables.get('roleId'));",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"metadata\": {\n    \"assignedBy\": \"{{userId}}\",\n    \"reason\": \"Promotion to team lead\",\n    \"effectiveDate\": \"2024-01-01\"\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "users", "{{userId}}", "roles"]
                }
              },
              "response": []
            },
            {
              "name": "Remove Role from User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles/{{roleId}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "roles",
                    "{{roleId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get User Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user roles structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response).to.have.property('roles');",
                      "    pm.expect(response).to.have.property('total');",
                      "});",
                      "",
                      "pm.test('User ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Roles is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.roles).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Total count is a number', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.total).to.be.a('number');",
                      "    pm.expect(response.total).to.be.greaterThanOrEqual(0);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "users", "{{userId}}", "roles"]
                }
              },
              "response": []
            },
            {
              "name": "Get User Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has permissions array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Permissions are strings', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        pm.expect(response.permissions[0]).to.be.a('string');",
                      "    }",
                      "});",
                      "",
                      "pm.test('Permission format is correct', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        const permission = response.permissions[0];",
                      "        pm.expect(permission).to.match(/^[a-z]+:[a-z]+$/);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": ["roles", "users", "{{userId}}", "permissions"]
                }
              },
              "response": []
            },
            {
              "name": "Check User Permission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has permission check result', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('hasPermission');",
                      "    pm.expect(response.hasPermission).to.be.a('boolean');",
                      "});",
                      "",
                      "pm.test('Response has request details', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('resource');",
                      "    pm.expect(response).to.have.property('action');",
                      "    pm.expect(response).to.have.property('scope');",
                      "    pm.expect(response).to.have.property('userId');",
                      "});",
                      "",
                      "pm.test('Request details match input', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.resource).to.equal('users');",
                      "    pm.expect(response.action).to.equal('create');",
                      "    pm.expect(response.scope).to.equal('tenant');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Response has roles that grant permission', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('grantedByRoles');",
                      "    pm.expect(response.grantedByRoles).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"resource\": \"users\",\n  \"action\": \"create\",\n  \"scope\": \"tenant\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions/check",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "permissions",
                    "check"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Tenants",
      "item": [
        {
          "name": "Create Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant is active by default', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('tenantId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Tenant\",\n  \"domain\": \"test-tenant.com\",\n  \"plan\": \"basic\",\n  \"maxUsers\": 10,\n  \"maxStorage\": 1024,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"small\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants",
              "host": ["{{baseUrl}}"],
              "path": ["tenants"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Tenants",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenants array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenants');",
                  "    pm.expect(response.tenants).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has total count', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants?page=1&limit=10&search=test&plan=basic&isActive=true",
              "host": ["{{baseUrl}}"],
              "path": ["tenants"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "test"
                },
                {
                  "key": "plan",
                  "value": "basic"
                },
                {
                  "key": "isActive",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalTenants');",
                  "    pm.expect(response).to.have.property('activeTenants');",
                  "    pm.expect(response).to.have.property('trialTenants');",
                  "    pm.expect(response).to.have.property('verifiedTenants');",
                  "    pm.expect(response).to.have.property('tenantsByPlan');",
                  "    pm.expect(response).to.have.property('recentTenants');",
                  "    pm.expect(response).to.have.property('growthRate');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "statistics"]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant ID matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('tenantId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant by Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/domain/test-tenant.com",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "domain", "test-tenant.com"]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response.name).to.equal('Updated Test Tenant');",
                  "    pm.expect(response.plan).to.equal('premium');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Tenant\",\n  \"plan\": \"premium\",\n  \"maxUsers\": 50,\n  \"maxStorage\": 2048,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\", \"advanced_analytics\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"medium\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Restore Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has restored tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/restore",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "restore"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has verified tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('isVerified');",
                  "    pm.expect(response.isVerified).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/verify",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has usage summary', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('tenantName');",
                  "    pm.expect(response).to.have.property('currentUsage');",
                  "    pm.expect(response).to.have.property('limits');",
                  "    pm.expect(response).to.have.property('usagePercentage');",
                  "    pm.expect(response).to.have.property('isOverLimit');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/usage",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "usage"]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated usage data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('metric');",
                  "    pm.expect(response).to.have.property('value');",
                  "    pm.expect(response).to.have.property('limit');",
                  "    pm.expect(response.metric).to.equal('apiCalls');",
                  "    pm.expect(response.value).to.equal(150);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": 150,\n  \"limit\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/usage/apiCalls",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "usage", "apiCalls"]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Features",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "features"]
            }
          },
          "response": []
        },
        {
          "name": "Check Feature Enabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has enabled status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(response.enabled).to.be.a('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/ADVANCED_ANALYTICS",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Feature Flag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated feature flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('feature');",
                  "    pm.expect(response).to.have.property('isEnabled');",
                  "    pm.expect(response.feature).to.equal('ADVANCED_ANALYTICS');",
                  "    pm.expect(response.isEnabled).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true,\n  \"config\": {\n    \"retentionDays\": 30,\n    \"maxQueries\": 1000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/ADVANCED_ANALYTICS",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tenant Onboarding",
      "item": [
        {
          "name": "Start Onboarding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has onboarding data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('progressPercentage');",
                  "    pm.expect(response).to.have.property('nextAction');",
                  "    pm.expect(response).to.have.property('estimatedCompletion');",
                  "});",
                  "",
                  "pm.test('Onboarding is in progress', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('in_progress');",
                  "    pm.expect(response.progressPercentage).to.be.at.least(0);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('onboardingId', response.onboardingId);",
                  "    if (response.tenantId) {",
                  "        pm.collectionVariables.set('tenantId', response.tenantId);",
                  "    }",
                  "    if (response.adminUserId) {",
                  "        pm.collectionVariables.set('adminUserId', response.adminUserId);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation\",\n  \"domain\": \"acme.example.com\",\n  \"adminUser\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"admin@acme.com\",\n    \"password\": \"SecurePass123!\",\n    \"phone\": \"+1-555-123-4567\",\n    \"jobTitle\": \"CEO\"\n  },\n  \"description\": \"A leading technology company\",\n  \"industry\": \"Technology\",\n  \"companySize\": \"50-100\",\n  \"contactEmail\": \"contact@acme.com\",\n  \"contactPhone\": \"+1-555-123-4567\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"San Francisco\",\n  \"state\": \"CA\",\n  \"postalCode\": \"94105\",\n  \"country\": \"United States\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"locale\": \"en-US\",\n  \"currency\": \"USD\",\n  \"plan\": \"pro\",\n  \"requestedFeatures\": [\"advanced_analytics\", \"email_templates\"],\n  \"sendWelcomeEmail\": true,\n  \"autoVerify\": false,\n  \"trialDays\": 30,\n  \"metadata\": {\n    \"source\": \"website\",\n    \"campaign\": \"summer2024\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding"]
            }
          }
        },
        {
          "name": "Get Onboarding Progress",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has progress data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('completedSteps');",
                  "    pm.expect(response).to.have.property('progressPercentage');",
                  "});",
                  "",
                  "pm.test('Progress data is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.progressPercentage).to.be.at.least(0).and.at.most(100);",
                  "    pm.expect(response.completedSteps).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "{{onboardingId}}"]
            }
          }
        },
        {
          "name": "Verify Onboarding Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Onboarding verified successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.equal('completed');",
                  "});",
                  "",
                  "pm.test('Progress is 100%', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.progressPercentage).to.equal(100);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"verificationToken\": \"{{verificationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/verify",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "{{onboardingId}}", "verify"]
            }
          }
        },
        {
          "name": "Resend Verification Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Verification email sent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('sent successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"email\": \"admin@acme.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}",
                "resend-verification"
              ]
            }
          }
        },
        {
          "name": "Cancel Onboarding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Onboarding cancelled', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('cancelled successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"reason\": \"User decided not to proceed\",\n  \"cleanup\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "{{onboardingId}}"]
            }
          }
        },
        {
          "name": "Check Onboarding Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check data is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('issues');",
                  "    pm.expect(response).to.have.property('lastActivity');",
                  "});",
                  "",
                  "pm.test('Status is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const validStatuses = ['healthy', 'warning', 'error'];",
                  "    pm.expect(validStatuses).to.include(response.status);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "{{onboardingId}}", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Start Onboarding - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response has message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"adminUser\": {\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"weak\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding"]
            }
          }
        },
        {
          "name": "Start Onboarding - Duplicate Tenant Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Conflict error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation\",\n  \"adminUser\": {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"email\": \"jane@acme.com\",\n    \"password\": \"SecurePass123!\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding"]
            }
          }
        },
        {
          "name": "Verify Onboarding - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid token error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Invalid verification token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"verificationToken\": \"invalid-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/verify",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "{{onboardingId}}", "verify"]
            }
          }
        },
        {
          "name": "Get Progress - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Not found error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/invalid-uuid",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "onboarding", "invalid-uuid"]
            }
          }
        }
      ]
    },
    {
      "name": "Tenant Switching",
      "item": [
        {
          "name": "User Tenant Management",
          "item": [
            {
              "name": "Get User Tenant Memberships",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('memberships');",
                      "    pm.expect(response).to.have.property('currentTenantId');",
                      "    pm.expect(response).to.have.property('totalCount');",
                      "    pm.expect(response).to.have.property('activeCount');",
                      "    pm.expect(response).to.have.property('pendingCount');",
                      "});",
                      "",
                      "pm.test('Memberships array is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.memberships).to.be.an('array');",
                      "    ",
                      "    if (response.memberships.length > 0) {",
                      "        const membership = response.memberships[0];",
                      "        pm.expect(membership).to.have.property('id');",
                      "        pm.expect(membership).to.have.property('tenant');",
                      "        pm.expect(membership).to.have.property('role');",
                      "        pm.expect(membership).to.have.property('status');",
                      "        pm.expect(membership).to.have.property('isCurrentTenant');",
                      "        pm.expect(membership).to.have.property('isActive');",
                      "        pm.expect(membership.tenant).to.have.property('id');",
                      "        pm.expect(membership.tenant).to.have.property('name');",
                      "    }",
                      "});",
                      "",
                      "// Store first tenant ID for other requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.memberships.length > 0) {",
                      "        pm.environment.set('tenantId', response.currentTenantId);",
                      "        pm.environment.set('targetTenantId', response.memberships[0].tenant.id);",
                      "        pm.environment.set('membershipId', response.memberships[0].id);",
                      "    }",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/user/memberships",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "user", "memberships"]
                }
              }
            },
            {
              "name": "Get Current Tenant Context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('tenantContext');",
                      "    pm.expect(response).to.have.property('membership');",
                      "});",
                      "",
                      "pm.test('Tenant context is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const context = response.tenantContext;",
                      "    pm.expect(context).to.have.property('id');",
                      "    pm.expect(context).to.have.property('name');",
                      "    pm.expect(context).to.have.property('plan');",
                      "    pm.expect(context).to.have.property('features');",
                      "    pm.expect(context.features).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Membership is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const membership = response.membership;",
                      "    pm.expect(membership).to.have.property('id');",
                      "    pm.expect(membership).to.have.property('role');",
                      "    pm.expect(membership).to.have.property('status');",
                      "    pm.expect(membership).to.have.property('permissions');",
                      "    pm.expect(membership.permissions).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/current",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "current"]
                }
              }
            }
          ]
        },
        {
          "name": "Tenant Switching",
          "item": [
            {
              "name": "Switch Tenant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response).to.have.property('tenantContext');",
                      "    pm.expect(response).to.have.property('membership');",
                      "    pm.expect(response).to.have.property('accessToken');",
                      "});",
                      "",
                      "pm.test('Switch was successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.accessToken).to.be.a('string');",
                      "    pm.expect(response.accessToken).to.not.be.empty;",
                      "});",
                      "",
                      "// Update access token with new one",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.environment.set('accessToken', response.accessToken);",
                      "    pm.environment.set('tenantId', response.tenantContext.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{targetTenantId}}\",\n  \"reason\": \"Testing tenant switch via Postman\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/switch",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "switch"]
                }
              }
            }
          ]
        },
        {
          "name": "Access Verification",
          "item": [
            {
              "name": "Verify Tenant Access",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('hasAccess');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Access verification result is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.hasAccess).to.be.a('boolean');",
                      "    ",
                      "    if (response.hasAccess) {",
                      "        pm.expect(response).to.have.property('role');",
                      "        pm.expect(response).to.have.property('status');",
                      "        pm.expect(response).to.have.property('tenant');",
                      "    } else {",
                      "        pm.expect(response).to.have.property('reason');",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"permissions\": [\"users:read\", \"projects:read\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/{{tenantId}}/verify-access",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "{{tenantId}}", "verify-access"]
                }
              }
            },
            {
              "name": "Bulk Verify Tenant Access",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('results');",
                      "    pm.expect(response).to.have.property('summary');",
                      "});",
                      "",
                      "pm.test('Summary is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const summary = response.summary;",
                      "    pm.expect(summary).to.have.property('totalChecked');",
                      "    pm.expect(summary).to.have.property('accessGranted');",
                      "    pm.expect(summary).to.have.property('accessDenied');",
                      "    pm.expect(summary.totalChecked).to.equal(summary.accessGranted + summary.accessDenied);",
                      "});",
                      "",
                      "pm.test('Results are valid', function () {",
                      "    const response = pm.response.json();",
                      "    const results = response.results;",
                      "    pm.expect(results).to.be.an('object');",
                      "    ",
                      "    Object.keys(results).forEach(tenantId => {",
                      "        const result = results[tenantId];",
                      "        pm.expect(result).to.have.property('hasAccess');",
                      "        pm.expect(result).to.have.property('permissions');",
                      "        pm.expect(result.permissions).to.be.an('array');",
                      "    });",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantIds\": [\"{{tenantId}}\", \"{{targetTenantId}}\"],\n  \"permissions\": [\"users:read\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/verify-access/bulk",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "verify-access", "bulk"]
                }
              }
            }
          ]
        },
        {
          "name": "Cache Management",
          "item": [
            {
              "name": "Clear User Cache",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/cache/clear",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "cache", "clear"]
                }
              }
            }
          ]
        },
        {
          "name": "Admin Operations",
          "item": [
            {
              "name": "Add User to Tenant (Admin)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response).to.have.property('membership');",
                      "});",
                      "",
                      "pm.test('Membership is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const membership = response.membership;",
                      "    pm.expect(membership).to.have.property('id');",
                      "    pm.expect(membership).to.have.property('userId');",
                      "    pm.expect(membership).to.have.property('tenantId');",
                      "    pm.expect(membership).to.have.property('role');",
                      "    pm.expect(membership).to.have.property('status');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"role\": \"member\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/admin/memberships",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "admin", "memberships"]
                }
              }
            },
            {
              "name": "Remove User from Tenant (Admin)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/admin/memberships/{{userId}}/{{tenantId}}/remove",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "tenants",
                    "admin",
                    "memberships",
                    "{{userId}}",
                    "{{tenantId}}",
                    "remove"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Tenant Switching Health",
          "item": [
            {
              "name": "Tenant Switching Health Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('service');",
                      "    pm.expect(response).to.have.property('timestamp');",
                      "    pm.expect(response).to.have.property('version');",
                      "    pm.expect(response.status).to.equal('ok');",
                      "    pm.expect(response.service).to.equal('tenant-switching');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/tenants/health",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "health"]
                }
              }
            },
            {
              "name": "Get Membership Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('membershipId');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/memberships/{{membershipId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["tenants", "memberships", "{{membershipId}}"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
