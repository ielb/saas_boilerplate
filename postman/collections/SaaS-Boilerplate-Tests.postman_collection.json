{
  "info": {
    "name": "SaaS Boilerplate Tests",
    "description": "Automated tests for SaaS Boilerplate API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api"
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "refreshToken",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "tenantId",
      "value": ""
    },
    {
      "key": "targetTenantId",
      "value": ""
    },
    {
      "key": "membershipId",
      "value": ""
    },
    {
      "key": "sessionId",
      "value": ""
    },
    {
      "key": "currentSessionId",
      "value": ""
    },
    {
      "key": "roleId",
      "value": ""
    },
    {
      "key": "permissionId",
      "value": ""
    },
    {
      "key": "permissionId1",
      "value": ""
    },
    {
      "key": "permissionId2",
      "value": ""
    },
    {
      "key": "permissionId3",
      "value": ""
    },
    {
      "key": "parentRoleId",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "1. Register User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "});",
                  "",
                  "pm.test('User ID is valid UUID', function () {",
                  "    const response = pm.response.json();",
                  "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
                  "    pm.expect(response.userId).to.match(uuidRegex);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('userId', response.userId);",
                  "    pm.environment.set('tenantId', response.tenantId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantName\": \"Test Company {{$randomInt}}\",\n  \"domain\": \"testcompany{{$randomInt}}.com\",\n  \"description\": \"Test tenant for automated testing\",\n  \"contactEmail\": \"admin@testcompany.com\",\n  \"contactPhone\": \"+1234567890\",\n  \"address\": \"123 Test Street\",\n  \"city\": \"Test City\",\n  \"state\": \"Test State\",\n  \"postalCode\": \"12345\",\n  \"country\": \"US\",\n  \"timezone\": \"America/New_York\",\n  \"locale\": \"en-US\",\n  \"currency\": \"USD\",\n  \"marketingConsent\": true,\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "2. Register User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantName\": \"Test Company\",\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "3. Register User - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Password validation error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantName\": \"Test Company\",\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "4. Login User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response.accessToken).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has refresh token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('refreshToken');",
                  "    pm.expect(response.refreshToken).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});",
                  "",
                  "pm.test('Response has expires in', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('expiresIn');",
                  "    pm.expect(response.expiresIn).to.be.a('number');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.user.id);",
                  "    pm.environment.set('tenantId', response.user.tenantId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "5. Login User - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "6. Get Profile - Authenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('firstName');",
                  "    pm.expect(response).to.have.property('lastName');",
                  "});",
                  "",
                  "pm.test('User ID matches', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('userId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "7. Get Profile - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "8. Refresh Token - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has new access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response.accessToken).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response has new refresh token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('refreshToken');",
                  "    pm.expect(response.refreshToken).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('New tokens are different from old ones', function () {",
                  "    const response = pm.response.json();",
                  "    const oldAccessToken = pm.environment.get('accessToken');",
                  "    const oldRefreshToken = pm.environment.get('refreshToken');",
                  "    pm.expect(response.accessToken).to.not.eql(oldAccessToken);",
                  "    pm.expect(response.refreshToken).to.not.eql(oldRefreshToken);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "9. Refresh Token - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "10. Logout - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('successfully');",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.set('accessToken', '');",
                  "pm.environment.set('refreshToken', '');"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Forgot Password - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Password reset email sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "12. Forgot Password - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "13. Reset Password - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.message).to.include('Password reset successfully');",
                  "    pm.expect(response.status).to.eql('success');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"valid-reset-token-here\",\n  \"newPassword\": \"NewSecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        },
        {
          "name": "14. Reset Password - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Invalid reset token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invalid-token\",\n  \"newPassword\": \"NewSecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        },
        {
          "name": "15. Reset Password - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"valid-reset-token-here\",\n  \"newPassword\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        },
        {
          "name": "11. Logout - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Logged out successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Multi-Factor Authentication Tests",
      "item": [
        {
          "name": "1. Setup MFA - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required MFA setup fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('secret');",
                  "    pm.expect(response).to.have.property('qrCode');",
                  "    pm.expect(response).to.have.property('backupCodes');",
                  "    pm.expect(response.backupCodes).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Secret is a valid base32 string', function () {",
                  "    const response = pm.response.json();",
                  "    const base32Regex = /^[A-Z2-7]+=*$/;",
                  "    pm.expect(response.secret).to.match(base32Regex);",
                  "});",
                  "",
                  "pm.test('QR code is a valid data URL', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.qrCode).to.match(/^data:image\\/png;base64,/);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('mfaSecret', response.secret);",
                  "    pm.environment.set('mfaBackupCodes', JSON.stringify(response.backupCodes));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/setup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "setup"]
            }
          },
          "response": []
        },
        {
          "name": "2. Setup MFA - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/setup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "setup"]
            }
          },
          "response": []
        },
        {
          "name": "3. Enable MFA - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('enabled successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/enable",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "enable"]
            }
          },
          "response": []
        },
        {
          "name": "4. Enable MFA - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"000000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/enable",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "enable"]
            }
          },
          "response": []
        },
        {
          "name": "5. Get MFA Status - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has MFA status fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isEnabled');",
                  "    pm.expect(response).to.have.property('isVerified');",
                  "    pm.expect(response).to.have.property('backupCodesRemaining');",
                  "    pm.expect(response.isEnabled).to.be.a('boolean');",
                  "    pm.expect(response.isVerified).to.be.a('boolean');",
                  "    pm.expect(response.backupCodesRemaining).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/status",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "status"]
            }
          },
          "response": []
        },
        {
          "name": "6. Verify MFA - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has verification result', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isValid');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.isValid).to.be.a('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "7. Verify MFA - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Verification fails with invalid token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isValid).to.be.false;",
                  "    pm.expect(response.message).to.include('Invalid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"000000\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "8. Regenerate Backup Codes - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has new backup codes', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('backupCodes');",
                  "    pm.expect(response.backupCodes).to.be.an('array');",
                  "    pm.expect(response.backupCodes.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('mfaBackupCodes', JSON.stringify(response.backupCodes));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/backup-codes/regenerate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "backup-codes", "regenerate"]
            }
          },
          "response": []
        },
        {
          "name": "9. Disable MFA - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('disabled successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/disable",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "mfa", "disable"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Account Recovery Tests",
      "item": [
        {
          "name": "1. Initiate Account Recovery - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('recovery email sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "initiate"]
            }
          },
          "response": []
        },
        {
          "name": "2. Initiate Account Recovery - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "initiate"]
            }
          },
          "response": []
        },
        {
          "name": "3. Initiate Account Recovery - Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/initiate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "initiate"]
            }
          },
          "response": []
        },
        {
          "name": "4. Verify Account Recovery - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('recoverySessionToken');",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('recoverySessionToken', response.recoverySessionToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"{{recoveryToken}}\",\n  \"backupCode\": \"{{recoveryBackupCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "5. Verify Account Recovery - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"invalid-token\",\n  \"backupCode\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "6. Verify Account Recovery - Invalid Backup Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.response.to.have.status(400);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"{{recoveryToken}}\",\n  \"backupCode\": \"invalid-code\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "7. Complete Account Recovery - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('secret');",
                  "    pm.expect(response).to.have.property('qrCode');",
                  "    pm.expect(response).to.have.property('backupCodes');",
                  "    pm.expect(response.backupCodes).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Secret is a valid base32 string', function () {",
                  "    const response = pm.response.json();",
                  "    const base32Regex = /^[A-Z2-7]+=*$/;",
                  "    pm.expect(response.secret).to.match(base32Regex);",
                  "});",
                  "",
                  "pm.test('QR code is a valid data URL', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.qrCode).to.match(/^data:image\\/png;base64,/);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoverySessionToken\": \"{{recoverySessionToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/complete",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "complete"]
            }
          },
          "response": []
        },
        {
          "name": "8. Complete Account Recovery - Invalid Session Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoverySessionToken\": \"invalid-session-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/complete",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "complete"]
            }
          },
          "response": []
        },
        {
          "name": "9. Get Recovery Status - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isValid');",
                  "    pm.expect(response).to.have.property('remainingAttempts');",
                  "    pm.expect(response).to.have.property('expiresAt');",
                  "});",
                  "",
                  "pm.test('Status is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isValid).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/status?recoverySessionToken={{recoverySessionToken}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "status"],
              "query": [
                {
                  "key": "recoverySessionToken",
                  "value": "{{recoverySessionToken}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "10. Get Recovery Status - Invalid Session Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/status?recoverySessionToken=invalid-session-token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "status"],
              "query": [
                {
                  "key": "recoverySessionToken",
                  "value": "invalid-session-token"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "11. Attempt Backup Code - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isValid');",
                  "    pm.expect(response).to.have.property('remainingAttempts');",
                  "});",
                  "",
                  "pm.test('Backup code is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isValid).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"{{recoveryToken}}\",\n  \"backupCode\": \"{{recoveryBackupCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/attempt",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "attempt"]
            }
          },
          "response": []
        },
        {
          "name": "12. Attempt Backup Code - Invalid Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isValid');",
                  "    pm.expect(response).to.have.property('remainingAttempts');",
                  "});",
                  "",
                  "pm.test('Backup code is invalid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isValid).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"{{recoveryToken}}\",\n  \"backupCode\": \"invalid-code\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/attempt",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "attempt"]
            }
          },
          "response": []
        },
        {
          "name": "13. Attempt Backup Code - Exceeded Attempts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 429', function () {",
                  "    pm.response.to.have.status(429);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('too many attempts');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"{{recoveryToken}}\",\n  \"backupCode\": \"wrong-code-1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/attempt",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "recovery", "attempt"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Session Management Tests",
      "item": [
        {
          "name": "1. Get All Sessions - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('sessions');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('activeCount');",
                  "    pm.expect(response).to.have.property('trustedCount');",
                  "});",
                  "",
                  "pm.test('Sessions array is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.sessions).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.sessions && response.sessions.length > 0) {",
                  "        pm.environment.set('sessionId', response.sessions[0].id);",
                  "        pm.environment.set('currentSessionId', response.sessions[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["sessions"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get Active Sessions - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All sessions are active', function () {",
                  "    const response = pm.response.json();",
                  "    response.forEach(session => {",
                  "        pm.expect(session.isActive).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/active",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "active"]
            }
          },
          "response": []
        },
        {
          "name": "3. Get Session by ID - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('deviceName');",
                  "    pm.expect(response).to.have.property('deviceType');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Session ID matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('sessionId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "4. Update Session - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session is updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.deviceName).to.eql('Updated Device Name');",
                  "    pm.expect(response.isTrusted).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceName\": \"Updated Device Name\",\n  \"isTrusted\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5. Mark Device as Trusted - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Device is marked as trusted', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isTrusted).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/trust",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "trust"]
            }
          },
          "response": []
        },
        {
          "name": "6. Update Session Activity - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/activity",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "activity"]
            }
          },
          "response": []
        },
        {
          "name": "7. Extend Session - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session expiration is extended', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('expiresAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"additionalMinutes\": 60\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/extend",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "extend"]
            }
          },
          "response": []
        },
        {
          "name": "8. Get Session Statistics - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('active');",
                  "    pm.expect(response).to.have.property('trusted');",
                  "    pm.expect(response).to.have.property('suspicious');",
                  "    pm.expect(response).to.have.property('expired');",
                  "    pm.expect(response).to.have.property('revoked');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/stats/summary",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "stats", "summary"]
            }
          },
          "response": []
        },
        {
          "name": "9. Mark Session as Suspicious - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session is marked as suspicious', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('suspicious');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/suspicious",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}", "suspicious"]
            }
          },
          "response": []
        },
        {
          "name": "10. Revoke Other Sessions - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-session-id",
                "value": "{{currentSessionId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/others",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "others"]
            }
          },
          "response": []
        },
        {
          "name": "11. Revoke Session - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["sessions", "{{sessionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "12. Revoke All Sessions - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Logout all devices\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": ["{{baseUrl}}"],
              "path": ["sessions"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health Check Tests",
      "item": [
        {
          "name": "API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 200ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.eql('ok');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "RBAC Setup - Authentication",
      "item": [
        {
          "name": "Login to Get Token for RBAC Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has authentication tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response).to.have.property('refreshToken');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Set authentication variables",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.collectionVariables.set('tenantId', response.user.tenantId);",
                  "}",
                  "",
                  "// Set default parent role ID (Admin role)",
                  "pm.collectionVariables.set('parentRoleId', 'admin-role-id');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"AdminPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "RBAC Permission Management Tests",
      "item": [
        {
          "name": "1. Create Custom Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Permission created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('files:manage');",
                  "    pm.expect(response.resource).to.equal('files');",
                  "    pm.expect(response.action).to.equal('manage');",
                  "    pm.expect(response.scope).to.equal('tenant');",
                  "    pm.expect(response.isSystem).to.be.false;",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});",
                  "",
                  "// Store permission ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('permissionId', response.id);",
                  "    pm.collectionVariables.set('permissionId1', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"files:manage\",\n  \"description\": \"File management permission\",\n  \"resource\": \"files\",\n  \"action\": \"manage\",\n  \"scope\": \"tenant\",\n  \"conditions\": {\n    \"requireApproval\": true\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["permissions"]
            }
          },
          "response": []
        },
        {
          "name": "2. Create Second Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Second permission created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('files:read');",
                  "    pm.expect(response.resource).to.equal('files');",
                  "    pm.expect(response.action).to.equal('read');",
                  "    pm.expect(response.scope).to.equal('tenant');",
                  "});",
                  "",
                  "// Store second permission ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('permissionId2', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"files:read\",\n  \"description\": \"File read permission\",\n  \"resource\": \"files\",\n  \"action\": \"read\",\n  \"scope\": \"tenant\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["permissions"]
            }
          },
          "response": []
        },
        {
          "name": "3. Get All Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permissions list retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "    pm.expect(response.page).to.equal(1);",
                  "    pm.expect(response.limit).to.equal(50);",
                  "});",
                  "",
                  "pm.test('File permissions exist in list', function () {",
                  "    const response = pm.response.json();",
                  "    const filePermissions = response.permissions.filter(p => p.name.startsWith('files:'));",
                  "    pm.expect(filePermissions.length).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/permissions?page=1&limit=50",
              "host": ["{{baseUrl}}"],
              "path": ["permissions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "50"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Get Permission by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permission retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('permissionId'));",
                  "    pm.expect(response.name).to.equal('files:manage');",
                  "    pm.expect(response.resource).to.equal('files');",
                  "    pm.expect(response.action).to.equal('manage');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/permissions/{{permissionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["permissions", "{{permissionId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5. Update Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permission updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('files:manage:enhanced');",
                  "    pm.expect(response.description).to.equal('Enhanced file management permission');",
                  "    pm.expect(response.scope).to.equal('team');",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"files:manage:enhanced\",\n  \"description\": \"Enhanced file management permission\",\n  \"scope\": \"team\",\n  \"conditions\": {\n    \"requireAudit\": true\n  },\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/permissions/{{permissionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["permissions", "{{permissionId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "RBAC Role Management Tests",
      "item": [
        {
          "name": "1. Create Custom Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Role created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('Team Lead');",
                  "    pm.expect(response.description).to.equal('Team lead role with enhanced permissions');",
                  "    pm.expect(response.type).to.equal('custom');",
                  "    pm.expect(response.level).to.equal(3);",
                  "    pm.expect(response.isSystem).to.be.false;",
                  "    pm.expect(response.isActive).to.be.true;",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.totalPermissions).to.be.a('number');",
                  "});",
                  "",
                  "// Store role ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('roleId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Team Lead\",\n  \"description\": \"Team lead role with enhanced permissions\",\n  \"type\": \"custom\",\n  \"level\": 3,\n  \"parentRoleId\": \"{{parentRoleId}}\",\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true\n  },\n  \"permissionIds\": [\n    \"{{permissionId1}}\",\n    \"{{permissionId2}}\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get All Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Roles list retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.roles).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "    pm.expect(response.page).to.equal(1);",
                  "    pm.expect(response.limit).to.equal(50);",
                  "});",
                  "",
                  "pm.test('Custom role exists in list', function () {",
                  "    const response = pm.response.json();",
                  "    const teamLeadRole = response.roles.find(r => r.name === 'Team Lead');",
                  "    pm.expect(teamLeadRole).to.exist;",
                  "    pm.expect(teamLeadRole.type).to.equal('custom');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles?page=1&limit=50",
              "host": ["{{baseUrl}}"],
              "path": ["roles"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "50"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Get Role by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Role retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                  "    pm.expect(response.name).to.equal('Team Lead');",
                  "    pm.expect(response.type).to.equal('custom');",
                  "    pm.expect(response.level).to.equal(3);",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.totalPermissions).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            }
          },
          "response": []
        },
        {
          "name": "4. Update Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Role updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.equal('Senior Team Lead');",
                  "    pm.expect(response.description).to.equal('Senior team lead with additional privileges');",
                  "    pm.expect(response.level).to.equal(2);",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Senior Team Lead\",\n  \"description\": \"Senior team lead with additional privileges\",\n  \"level\": 2,\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true,\n    \"canManageBudget\": true\n  },\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5. Assign Additional Permissions to Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permissions assigned successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.totalPermissions).to.be.at.least(3);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permissionIds\": [\n    \"{{permissionId3}}\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}", "permissions"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "RBAC User Role Management Tests",
      "item": [
        {
          "name": "1. Assign Role to User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Role assigned successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Role assigned successfully');",
                  "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.roleId).to.equal(pm.collectionVariables.get('roleId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"metadata\": {\n    \"assignedBy\": \"{{userId}}\",\n    \"reason\": \"Promotion to team lead\",\n    \"effectiveDate\": \"2024-01-01\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "roles"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get User Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User roles retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.userRoles).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "    pm.expect(response.total).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Assigned role exists in user roles', function () {",
                  "    const response = pm.response.json();",
                  "    const assignedRole = response.userRoles.find(ur => ur.roleId === pm.collectionVariables.get('roleId'));",
                  "    pm.expect(assignedRole).to.exist;",
                  "    pm.expect(assignedRole.roleName).to.equal('Senior Team Lead');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "roles"]
            }
          },
          "response": []
        },
        {
          "name": "3. Get User Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User permissions retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                  "});",
                  "",
                  "pm.test('User has file permissions', function () {",
                  "    const response = pm.response.json();",
                  "    const filePermissions = response.permissions.filter(p => p.startsWith('files:'));",
                  "    pm.expect(filePermissions.length).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "permissions"]
            }
          },
          "response": []
        },
        {
          "name": "4. Check User Permission - Has Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permission check successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('hasPermission');",
                  "    pm.expect(response).to.have.property('resource');",
                  "    pm.expect(response).to.have.property('action');",
                  "    pm.expect(response).to.have.property('scope');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('grantedByRoles');",
                  "});",
                  "",
                  "pm.test('User has files:manage permission', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.hasPermission).to.be.true;",
                  "    pm.expect(response.resource).to.equal('files');",
                  "    pm.expect(response.action).to.equal('manage');",
                  "    pm.expect(response.scope).to.equal('tenant');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resource\": \"files\",\n  \"action\": \"manage\",\n  \"scope\": \"tenant\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions/check",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "permissions", "check"]
            }
          },
          "response": []
        },
        {
          "name": "5. Check User Permission - No Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permission check indicates no access', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.hasPermission).to.be.false;",
                  "    pm.expect(response.resource).to.equal('admin');",
                  "    pm.expect(response.action).to.equal('delete');",
                  "    pm.expect(response.scope).to.equal('global');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resource\": \"admin\",\n  \"action\": \"delete\",\n  \"scope\": \"global\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions/check",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "permissions", "check"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "RBAC Cleanup Tests",
      "item": [
        {
          "name": "1. Remove Role from User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Role removed successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Role removed successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles/users/{{userId}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "users", "{{userId}}", "roles", "{{roleId}}"]
            }
          },
          "response": []
        },
        {
          "name": "2. Delete Custom Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Role deleted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Role deleted successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles/{{roleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["roles", "{{roleId}}"]
            }
          },
          "response": []
        },
        {
          "name": "3. Delete Custom Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Permission deleted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Permission deleted successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/permissions/{{permissionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["permissions", "{{permissionId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tenant Management Tests",
      "item": [
        {
          "name": "1. Create Tenant - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant is active by default', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('testTenantId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Tenant\",\n  \"domain\": \"test-tenant.com\",\n  \"plan\": \"basic\",\n  \"maxUsers\": 10,\n  \"maxStorage\": 1024,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"small\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants",
              "host": ["{{baseUrl}}"],
              "path": ["tenants"]
            }
          },
          "response": []
        },
        {
          "name": "2. Get All Tenants",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenants array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenants');",
                  "    pm.expect(response.tenants).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has total count', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('At least one tenant exists', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.total).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["tenants"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Get Tenant Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalTenants');",
                  "    pm.expect(response).to.have.property('activeTenants');",
                  "    pm.expect(response).to.have.property('trialTenants');",
                  "    pm.expect(response).to.have.property('verifiedTenants');",
                  "    pm.expect(response).to.have.property('tenantsByPlan');",
                  "    pm.expect(response).to.have.property('recentTenants');",
                  "    pm.expect(response).to.have.property('growthRate');",
                  "});",
                  "",
                  "pm.test('Statistics are valid numbers', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.totalTenants).to.be.a('number');",
                  "    pm.expect(response.activeTenants).to.be.a('number');",
                  "    pm.expect(response.growthRate).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "statistics"]
            }
          },
          "response": []
        },
        {
          "name": "4. Get Tenant by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant ID matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.equal(pm.environment.get('testTenantId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5. Update Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response.name).to.equal('Updated Test Tenant');",
                  "    pm.expect(response.plan).to.equal('premium');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Tenant\",\n  \"plan\": \"premium\",\n  \"maxUsers\": 50,\n  \"maxStorage\": 2048,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\", \"advanced_analytics\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"medium\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "6. Get Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has usage summary', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('tenantName');",
                  "    pm.expect(response).to.have.property('currentUsage');",
                  "    pm.expect(response).to.have.property('limits');",
                  "    pm.expect(response).to.have.property('usagePercentage');",
                  "    pm.expect(response).to.have.property('isOverLimit');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/usage",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}", "usage"]
            }
          },
          "response": []
        },
        {
          "name": "7. Update Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated usage data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('metric');",
                  "    pm.expect(response).to.have.property('value');",
                  "    pm.expect(response).to.have.property('limit');",
                  "    pm.expect(response.metric).to.equal('apiCalls');",
                  "    pm.expect(response.value).to.equal(150);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": 150,\n  \"limit\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/usage/apiCalls",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}", "usage", "apiCalls"]
            }
          },
          "response": []
        },
        {
          "name": "8. Check Feature Enabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has enabled status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(response.enabled).to.be.a('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/ADVANCED_ANALYTICS",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{testTenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        },
        {
          "name": "9. Update Feature Flag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated feature flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('feature');",
                  "    pm.expect(response).to.have.property('isEnabled');",
                  "    pm.expect(response.feature).to.equal('ADVANCED_ANALYTICS');",
                  "    pm.expect(response.isEnabled).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true,\n  \"config\": {\n    \"retentionDays\": 30,\n    \"maxQueries\": 1000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/ADVANCED_ANALYTICS",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{testTenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        },
        {
          "name": "10. Bulk Update Feature Flags",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bulk update successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "    pm.expect(response.length).to.equal(2);",
                  "});",
                  "",
                  "pm.test('Feature flags updated correctly', function () {",
                  "    const response = pm.response.json();",
                  "    const mfaFlag = response.find(flag => flag.feature === 'MFA_ENFORCEMENT');",
                  "    const ssoFlag = response.find(flag => flag.feature === 'SSO_INTEGRATION');",
                  "    pm.expect(mfaFlag.isEnabled).to.be.true;",
                  "    pm.expect(ssoFlag.isEnabled).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"updates\": [\n    {\n      \"feature\": \"mfa_enforcement\",\n      \"enabled\": true,\n      \"config\": {\n        \"maxRetries\": 3\n      }\n    },\n    {\n      \"feature\": \"sso_integration\",\n      \"enabled\": false\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}", "features", "bulk"]
            }
          },
          "response": []
        },
        {
          "name": "11. Get Feature Flags Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics response structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(response).to.have.property('disabled');",
                  "    pm.expect(typeof response.total).to.equal('number');",
                  "    pm.expect(typeof response.enabled).to.equal('number');",
                  "    pm.expect(typeof response.disabled).to.equal('number');",
                  "});",
                  "",
                  "pm.test('Statistics are consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.total).to.equal(response.enabled + response.disabled);",
                  "    pm.expect(response.total).to.be.at.least(0);",
                  "    pm.expect(response.enabled).to.be.at.least(0);",
                  "    pm.expect(response.disabled).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/stats",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}", "features", "stats"]
            }
          },
          "response": []
        },
        {
          "name": "12. Test Case Insensitive Feature Names",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Case insensitive feature name works', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(typeof response.enabled).to.equal('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/MFA_ENFORCEMENT",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{testTenantId}}",
                "features",
                "MFA_ENFORCEMENT"
              ]
            }
          },
          "response": []
        },
        {
          "name": "13. Test Invalid Feature Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message contains valid features', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Valid features are:');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}/features/invalid_feature",
              "host": ["{{baseUrl}}"],
              "path": [
                "tenants",
                "{{testTenantId}}",
                "features",
                "invalid_feature"
              ]
            }
          },
          "response": []
        },
        {
          "name": "14. Delete Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{testTenantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{testTenantId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Suite - Tenant Switching",
      "item": [
        {
          "name": "Test: Get User Tenant Memberships",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('memberships');",
                  "    pm.expect(response).to.have.property('currentTenantId');",
                  "    pm.expect(response).to.have.property('totalCount');",
                  "    pm.expect(response).to.have.property('activeCount');",
                  "    pm.expect(response).to.have.property('pendingCount');",
                  "});",
                  "",
                  "pm.test('User has at least one membership', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.memberships).to.be.an('array');",
                  "    pm.expect(response.memberships.length).to.be.at.least(1);",
                  "    pm.expect(response.totalCount).to.be.at.least(1);",
                  "    pm.expect(response.activeCount).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Membership data structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const membership = response.memberships[0];",
                  "    ",
                  "    pm.expect(membership).to.have.property('id');",
                  "    pm.expect(membership).to.have.property('tenant');",
                  "    pm.expect(membership).to.have.property('role');",
                  "    pm.expect(membership).to.have.property('status');",
                  "    pm.expect(membership).to.have.property('isCurrentTenant');",
                  "    pm.expect(membership).to.have.property('isActive');",
                  "    pm.expect(membership).to.have.property('joinedAt');",
                  "    pm.expect(membership).to.have.property('permissions');",
                  "    ",
                  "    // Tenant structure",
                  "    pm.expect(membership.tenant).to.have.property('id');",
                  "    pm.expect(membership.tenant).to.have.property('name');",
                  "    pm.expect(membership.tenant).to.have.property('plan');",
                  "    pm.expect(membership.tenant).to.have.property('features');",
                  "    pm.expect(membership.tenant.features).to.be.an('array');",
                  "    ",
                  "    // Permissions structure",
                  "    pm.expect(membership.permissions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Current tenant is correctly identified', function () {",
                  "    const response = pm.response.json();",
                  "    const currentMembership = response.memberships.find(m => m.isCurrentTenant);",
                  "    pm.expect(currentMembership).to.not.be.undefined;",
                  "    pm.expect(currentMembership.tenant.id).to.equal(response.currentTenantId);",
                  "});",
                  "",
                  "// Store data for subsequent tests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('membershipId', response.memberships[0].id);",
                  "    ",
                  "    // If there's more than one membership, store a target for switching",
                  "    if (response.memberships.length > 1) {",
                  "        const targetMembership = response.memberships.find(m => !m.isCurrentTenant);",
                  "        if (targetMembership) {",
                  "            pm.environment.set('targetTenantId', targetMembership.tenant.id);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/user/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "user", "memberships"]
            }
          }
        },
        {
          "name": "Test: Get Current Tenant Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response).to.have.property('tenantContext');",
                  "    pm.expect(response).to.have.property('membership');",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Tenant context is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const context = response.tenantContext;",
                  "    ",
                  "    pm.expect(context).to.have.property('id');",
                  "    pm.expect(context).to.have.property('name');",
                  "    pm.expect(context).to.have.property('plan');",
                  "    pm.expect(context).to.have.property('features');",
                  "    pm.expect(context).to.have.property('settings');",
                  "    pm.expect(context.features).to.be.an('array');",
                  "    pm.expect(context.settings).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Membership context is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const membership = response.membership;",
                  "    ",
                  "    pm.expect(membership).to.have.property('id');",
                  "    pm.expect(membership).to.have.property('role');",
                  "    pm.expect(membership).to.have.property('status');",
                  "    pm.expect(membership).to.have.property('permissions');",
                  "    pm.expect(membership).to.have.property('joinedAt');",
                  "    pm.expect(membership.permissions).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/current",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "current"]
            }
          }
        },
        {
          "name": "Test: Verify Tenant Access - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Access granted for current tenant', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('hasAccess');",
                  "    pm.expect(response.hasAccess).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains access details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('role');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('permissions');",
                  "    pm.expect(response).to.have.property('tenant');",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Permission checks work correctly', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.permissionChecks) {",
                  "        pm.expect(response.permissionChecks).to.be.an('object');",
                  "        Object.values(response.permissionChecks).forEach(check => {",
                  "            pm.expect(check).to.be.a('boolean');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permissions\": [\"users:read\", \"projects:read\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/verify-access",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "{{tenantId}}", "verify-access"]
            }
          }
        },
        {
          "name": "Test: Verify Tenant Access - Invalid Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Access denied for invalid tenant', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('hasAccess');",
                  "    pm.expect(response.hasAccess).to.be.false;",
                  "});",
                  "",
                  "pm.test('Denial reason provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('reason');",
                  "    pm.expect(response.reason).to.be.a('string');",
                  "    pm.expect(response.reason).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Empty permissions array for denied access', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('permissions');",
                  "    pm.expect(response.permissions).to.be.an('array');",
                  "    pm.expect(response.permissions).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permissions\": [\"users:read\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/invalid-tenant-id/verify-access",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "invalid-tenant-id", "verify-access"]
            }
          }
        },
        {
          "name": "Test: Bulk Verify Tenant Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('results');",
                  "    pm.expect(response).to.have.property('summary');",
                  "    pm.expect(response.results).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Summary data is accurate', function () {",
                  "    const response = pm.response.json();",
                  "    const summary = response.summary;",
                  "    ",
                  "    pm.expect(summary).to.have.property('totalChecked');",
                  "    pm.expect(summary).to.have.property('accessGranted');",
                  "    pm.expect(summary).to.have.property('accessDenied');",
                  "    ",
                  "    pm.expect(summary.totalChecked).to.equal(summary.accessGranted + summary.accessDenied);",
                  "    pm.expect(summary.totalChecked).to.be.at.least(2);",
                  "});",
                  "",
                  "pm.test('Individual results are valid', function () {",
                  "    const response = pm.response.json();",
                  "    const results = response.results;",
                  "    ",
                  "    Object.keys(results).forEach(tenantId => {",
                  "        const result = results[tenantId];",
                  "        pm.expect(result).to.have.property('hasAccess');",
                  "        pm.expect(result).to.have.property('permissions');",
                  "        pm.expect(result.hasAccess).to.be.a('boolean');",
                  "        pm.expect(result.permissions).to.be.an('array');",
                  "        ",
                  "        if (!result.hasAccess) {",
                  "            pm.expect(result).to.have.property('reason');",
                  "        }",
                  "    });",
                  "});",
                  "",
                  "pm.test('At least one access granted', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.summary.accessGranted).to.be.at.least(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantIds\": [\"{{tenantId}}\", \"invalid-tenant-id\"],\n  \"permissions\": [\"users:read\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/verify-access/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "verify-access", "bulk"]
            }
          }
        },
        {
          "name": "Test: Clear User Cache",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Cache cleared successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.include('cache cleared');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/cache/clear",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "cache", "clear"]
            }
          }
        },
        {
          "name": "Test: Tenant Switching Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('service');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('version');",
                  "    pm.expect(response.status).to.equal('ok');",
                  "    pm.expect(response.service).to.equal('tenant-switching');",
                  "    pm.expect(response.version).to.equal('1.0.0');",
                  "});",
                  "",
                  "pm.test('Timestamp is recent', function () {",
                  "    const response = pm.response.json();",
                  "    const timestamp = new Date(response.timestamp);",
                  "    const now = new Date();",
                  "    const diff = now.getTime() - timestamp.getTime();",
                  "    pm.expect(diff).to.be.below(5000); // Within 5 seconds",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/health",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "health"]
            }
          }
        },
        {
          "name": "Test: Response Time - Get Memberships",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/user/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "user", "memberships"]
            }
          }
        },
        {
          "name": "Test: Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response has message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/user/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "user", "memberships"]
            }
          }
        },
        {
          "name": "Test: Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response has message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/user/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["tenants", "user", "memberships"]
            }
          }
        }
      ]
    }
  ]
}
